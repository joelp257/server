# -*- coding: utf-8 -*-
"""diabetesdata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15A3TI3T8GBUwK35ChwaAOJdy9hD1fkwG
"""



import pandas as pd
import numpy as np
from bokeh.plotting import figure, output_file, show
from bokeh.models import ColumnDataSource, HoverTool, CustomJS, Div, Button, RadioButtonGroup
from bokeh.layouts import column, row
from bokeh.palettes import brewer
from bokeh.io import output_notebook
output_notebook()

# Load your diabetes dataset (replace 'diabetes.csv' with your actual file path)
data = pd.read_csv("diabetes.csv")

# Calculate the correlation matrix
corrmat = data.corr()

# Convert the correlation matrix to a long-form DataFrame
corr_df = corrmat.stack().reset_index()
corr_df.columns = ['feature1', 'feature2', 'correlation']

# Create a Bokeh heatmap
source_corr = ColumnDataSource(corr_df)
hover_corr = HoverTool(tooltips=[('Features', '@feature1, @feature2'), ('Correlation', '@correlation')])
p_corr = figure(width=600, height=600, title="Correlation Heatmap")
p_corr.rect(x='feature1', y='feature2', width=1, height=1, source=source_corr, fill_color='coral', line_color=None)
p_corr.add_tools(hover_corr)

# Create a bar plot for the distribution of diabetes classes
class_counts = data['Outcome'].value_counts()
class_labels = ['No Diabetes', 'Diabetes']
source_dist = ColumnDataSource(data=dict(x=class_labels, counts=class_counts))
p_dist = figure(x_range=class_labels,height=300, title="Distribution of Diabetes Classes")
p_dist.vbar(x='x', top='counts', width=0.5, source=source_dist, color='blue')

# Create a simple text display for the Random Forest Model Accuracy
accuracy = 0.85  # Replace with your actual accuracy value
accuracy_text = "Random Forest Model Accuracy: {:.3f}".format(accuracy)
p_accuracy = figure(width=400, height=100, title="Random Forest Model Accuracy")
p_accuracy.text(x=0, y=0, text=[accuracy_text], text_font_size="12pt", text_align="left")

# Create a bar plot for the XGBoost Cross-Validation Scores
cross_val_scores = [0.82, 0.84, 0.86, 0.83, 0.85]  # Replace with your actual scores
source_scores = ColumnDataSource(data=dict(x=list(range(1, 6)), scores=cross_val_scores))
p_scores = figure(x_range=(0, 6), height=300, title="XGBoost Cross-Validation Scores")
p_scores.vbar(x='x', top='scores', width=0.5, source=source_scores, color='green')

# Combine all plots into a layout
layout = column(
    row(p_corr, p_dist),
    row(p_accuracy, p_scores)
)

# Specify the output file
output_file("diabetes_dashboard.html")
# Show the dashboard
show(layout)